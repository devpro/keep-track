# Azure pipeline definition for the integration of the solution (continuous integration)
# See: https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
  autoCancel: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

schedules:
- cron: "0 0 * * *"
  displayName: 'Daily midnight build'
  branches:
    include:
    - master
  always: true

variables:
# library variable groups
- group: 'build-tools'
- group: 'keeptrack-prod'
# environment variables
- name: DOTNET_CLI_TELEMETRY_OPTOUT
  value: 1
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: 1
# common task variables
- name: 'BuildConfiguration'
  value: 'Debug'
- name: 'SolutionFile'
  value: 'KeepTrack.sln'
- name: 'TestProjects'
  value: '**/*[Tt]ests/*.csproj'
# tool variables (Sonar)
- name: 'sonar.project.name'
  value: 'KeepTrack'
- name: 'sonar.project.key'
  value: 'devpro.keep-track'
# specific variables
- name: 'dotnet.path'
  value: 'dotnet'
- name: 'angular.path'
  value: 'angular-bootstrap'
- name: 'nodejs.version.spec'
  value: '12.x'
- name: 'angular.cli.version'
  value: '8.3.25'

pool:
  # code coverage generation only works on Windows for the moment
  vmImage: 'windows-latest'

steps:

- task: NodeTool@0
  displayName: 'Install Node.js'
  inputs:
    versionSpec: $(nodejs.version.spec)

- task: Npm@1
  displayName: 'Install Angular CLI'
  inputs:
    command: 'custom'
    customCommand: 'install -g @angular/cli@$(angular.cli.version)'

- task: SonarCloudPrepare@1
  displayName: 'Prepare code analysis'
  inputs:
    SonarCloud: '$(sonar.instance)'
    organization: '$(sonar.organization)'
    scannerMode: 'MSBuild'
    projectKey: '$(sonar.project.key)'
    projectName: '$(sonar.project.name)'
    extraProperties: |
      sonar.cpd.exclusions=**/Models/*.cs,**/Dto/*.cs
      sonar.exclusions=**/node_modules/**,**/*.spec.ts,**/e2e/**,**/coverage/**
      sonar.typescript.tsconfigPath=$(angular.path)/tslint.json
      sonar.typescript.lcov.reportPaths=$(angular.path)/coverage/lcov.info

- task: DotNetCoreCLI@2
  displayName: 'Build the .NET solution'
  inputs:
    command: 'build'
    projects: '$(dotnet.path)/$(SolutionFile)'
    arguments: '-c $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run the .NET test projects'
  inputs:
    command: 'test'
    projects: '$(dotnet.path)/$(TestProjects)'
    arguments: '--configuration $(BuildConfiguration) --collect "Code coverage"'

- task: Npm@1
  displayName: 'Install the NPM packages'
  inputs:
    command: 'install'
    workingDir: $(angular.path)

- task: Npm@1
  displayName: 'Run Angular lint'
  inputs:
    command: 'custom'
    customCommand: 'run ng lint'
    workingDir: $(angular.path)

- task: Bash@3
  displayName: 'Write environment.dev.ts file'
  inputs:
    targetType: 'inline'
    script: |
      cat > $(angular.path)/src/environments/environment.dev.ts <<EOL
      export const environment = {
        production: true,
        keepTrackApiUrl: '$(keeptrack.api.url)',
        firebase: {
          apiKey: '$(keeptrack.firebase.apikey)',
          authDomain: '$(keeptrack.firebase.projectid).firebaseapp.com',
          databaseURL: 'https://$(keeptrack.firebase.projectid).firebaseio.com',
          projectId: '$(keeptrack.firebase.projectid)',
          storageBucket: '$(keeptrack.firebase.projectid).appspot.com',
          messagingSenderId: '$(keeptrack.firebase.messagingsenderid)',
          appId: '$(keeptrack.firebase.appid)',
          measurementId: '$(keeptrack.firebase.measurementid)'
        }
      };
      EOL

- task: Npm@1
  displayName: 'Run Angular unit tests'
  inputs:
    command: 'custom'
    customCommand: 'run test:ci'
    workingDir: $(angular.path)

- task: PublishTestResults@2
  displayName: 'Publish Angular test results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TESTS-*.xml'
    searchFolder: '$(angular.path)'

- task: SonarCloudAnalyze@1
  displayName: 'Analyze the code with Sonar'

- task: SonarCloudPublish@1
  displayName: 'Publish the code analysis results'
  inputs:
    pollingTimeoutSec: '300'
