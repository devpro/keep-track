# Azure pipeline definition for the integration of the solution (continuous integration)
# See: https://aka.ms/yaml

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

pr:
  autoCancel: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md

schedules:
- cron: "0 0 * * *"
  displayName: 'Daily midnight build'
  branches:
    include:
    - master
  always: true

variables:
# library variable groups
- group: 'build-tools'
- group: 'keeptrack-prod'
- group: 'keeptrack-test'
# common task variables
- name: 'BuildConfiguration'
  value: 'Debug'
- name: 'SolutionFile'
  value: 'KeepTrack.sln'
- name: 'TestProjects'
  value: 'test/*Tests/*.csproj'
- name: 'UnitTestProjects'
  value: 'test/*UnitTests/*.csproj'
- name: 'IntegrationTestProjects'
  value: 'test/*IntegrationTests/*.csproj'
# tool variables (Sonar)
- name: 'sonar.project.name'
  value: 'KeepTrack'
- name: 'sonar.project.key'
  value: 'devpro.keep-track'
# specific variables
- name: 'dotnet.path'
  value: 'dotnet'
- name: 'angular.path'
  value: 'angular-bootstrap'
- name: 'nodejs.version.spec'
  value: '12.x'
- name: 'angular.cli.version'
  value: '8.3.25'

stages:

# Unit testing
- stage: 'unit_testing'
  displayName: 'Unit testing'
  jobs:
  - job: 'linux_unittests'
    displayName: 'Unit tests run on Linux'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET solution'
      inputs:
        command: 'build'
        projects: '$(dotnet.path)/$(SolutionFile)'
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run .NET unit tests'
      inputs:
        command: 'test'
        projects: '$(dotnet.path)/$(UnitTestProjects)'
        arguments: '--configuration $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodejs.version.spec)
    - task: Npm@1
      displayName: 'Install Angular CLI'
      inputs:
        command: 'custom'
        customCommand: 'install -g @angular/cli@$(angular.cli.version)'
    - task: Npm@1
      displayName: 'Install NPM packages'
      inputs:
        command: 'install'
        workingDir: $(angular.path)
    - task: Bash@3
      displayName: 'Write environment.dev.ts file'
      inputs:
        targetType: 'inline'
        script: |
          cat > $(angular.path)/src/environments/environment.dev.ts <<EOL
          export const environment = {
            production: true,
            keepTrackApiUrl: '$(keeptrack.api.url)',
            firebase: {
              apiKey: '$(keeptrack.firebase.apikey)',
              authDomain: '$(keeptrack.firebase.projectid).firebaseapp.com',
              databaseURL: 'https://$(keeptrack.firebase.projectid).firebaseio.com',
              projectId: '$(keeptrack.firebase.projectid)',
              storageBucket: '$(keeptrack.firebase.projectid).appspot.com',
              messagingSenderId: '$(keeptrack.firebase.messagingsenderid)',
              appId: '$(keeptrack.firebase.appid)',
              measurementId: '$(keeptrack.firebase.measurementid)'
            }
          };
          EOL
    - task: Npm@1
      displayName: 'Run Angular unit tests'
      inputs:
        command: 'custom'
        customCommand: 'run test:ci'
        workingDir: $(angular.path)
    - task: DotNetCoreCLI@2
      displayName: 'Publish integration test libraries'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(dotnet.path)/$(IntegrationTestProjects)'
        arguments: '--configuration $(BuildConfiguration) -o $(Build.ArtifactStagingDirectory)/testlibraries'
        zipAfterPublish: true
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: PublishBuildArtifacts@1
      displayName: 'Save test projects artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/testlibraries'
        ArtifactName: 'testlibraries'
        publishLocation: 'Container'

# Integration testing
- stage: 'integration_testing'
  displayName: 'Integration testing'
  dependsOn: [] # no dependencies: run at the same time as the unit testing stage
  condition: eq(variables['RunIntegrationTestingStage'], true)
  jobs:
  - job: 'windows_integrationtests'
    displayName: 'Windows CI'
    pool:
      # code coverage generation only works on Windows for the moment
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET packages'
      inputs:
        command: 'restore'
        projects: '$(dotnet.path)/$(SolutionFile)'
        feedsToUse: 'select'
        noCache: $(dotnet.cache.disable)
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: PowerShell@2
      displayName: 'Start local MongoDB'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Starting MongoDB"
          md log
          md data
          Start-Process -FilePath "mongod" -ArgumentList "--logpath log/mongod.log", "--dbpath data", "--port 27017" -WindowStyle Hidden
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: $(nodejs.version.spec)
    - task: Npm@1
      displayName: 'Install Angular CLI'
      inputs:
        command: 'custom'
        customCommand: 'install -g @angular/cli@$(angular.cli.version)'
    - task: SonarCloudPrepare@1
      displayName: 'Prepare code analysis'
      inputs:
        SonarCloud: '$(sonar.instance)'
        organization: '$(sonar.organization)'
        scannerMode: 'MSBuild'
        projectKey: '$(sonar.project.key)'
        projectName: '$(sonar.project.name)'
        extraProperties: |
          sonar.cpd.exclusions=**/*.Domain/*Model.cs,**/*.Dto/*Dto.cs
          sonar.exclusions=**/node_modules/**,**/*.spec.ts,**/e2e/**,**/coverage/**
          sonar.typescript.tsconfigPath=$(angular.path)/tslint.json
          sonar.typescript.lcov.reportPaths=$(angular.path)/coverage/lcov.info
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET solution'
      inputs:
        command: 'build'
        projects: '$(dotnet.path)/$(SolutionFile)'
        arguments: '-c $(BuildConfiguration)'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run .NET test projects'
      inputs:
        command: 'test'
        projects: '$(dotnet.path)/$(TestProjects)'
        arguments: '--configuration $(BuildConfiguration) --filter "Environment=Localhost|Category=UnitTests" --collect "Code coverage"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
        AllowedOrigins__0: http://localhost:4200
        Infrastructure__MongoDB__ConnectionString: mongodb://localhost:27017
        Infrastructure__MongoDB__DatabaseName: keeptrack_integrationtests
        Authentication__JtBearer__TokenValidation__Issuer: $(authentication.jwtbearer.tokenvalidation.issuer)
        Authentication__JwtBearer__Authority: $(authentication.jwtbearer.authority)
        Authentication__JwtBearer__TokenValidation__Audience: $(authentication.jwtbearer.tokenvalidation.audience)
        Firebase__Application__Key: $(firebase.applicationkey)
        Firebase__Username: $(firebase.authentication.username)
        Firebase__Password: $(firebase.authentication.password)
    - task: Npm@1
      displayName: 'Install NPM packages'
      inputs:
        command: 'install'
        workingDir: $(angular.path)
    - task: Npm@1
      displayName: 'Run Angular lint'
      inputs:
        command: 'custom'
        customCommand: 'run ng lint'
        workingDir: $(angular.path)
    - task: Bash@3
      displayName: 'Write environment.dev.ts file'
      inputs:
        targetType: 'inline'
        script: |
          cat > $(angular.path)/src/environments/environment.dev.ts <<EOL
          export const environment = {
            production: true,
            keepTrackApiUrl: '$(keeptrack.api.url)',
            firebase: {
              apiKey: '$(keeptrack.firebase.apikey)',
              authDomain: '$(keeptrack.firebase.projectid).firebaseapp.com',
              databaseURL: 'https://$(keeptrack.firebase.projectid).firebaseio.com',
              projectId: '$(keeptrack.firebase.projectid)',
              storageBucket: '$(keeptrack.firebase.projectid).appspot.com',
              messagingSenderId: '$(keeptrack.firebase.messagingsenderid)',
              appId: '$(keeptrack.firebase.appid)',
              measurementId: '$(keeptrack.firebase.measurementid)'
            }
          };
          EOL
    - task: Npm@1
      displayName: 'Run Angular unit tests'
      inputs:
        command: 'custom'
        customCommand: 'run test:ci'
        workingDir: $(angular.path)
    - task: PublishTestResults@2
      displayName: 'Publish Angular test results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
        searchFolder: '$(angular.path)'
    - task: SonarCloudAnalyze@1
      displayName: 'Analyze the code with Sonar'
    - task: SonarCloudPublish@1
      displayName: 'Publish the code analysis results'
      inputs:
        pollingTimeoutSec: '300'
    - task: CopyFiles@2
      displayName: 'Copy screenshots'
      condition: failed()
      inputs:
        Contents: '**/screenshot*.png'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      condition: failed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
