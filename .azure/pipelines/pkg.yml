# Azure pipeline definition for the packaging of the solution (continuous delivery)

trigger:
  batch: false
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md

pr: none

variables:
  # library variable groups
  - group: "devproapp-prod"
  # application path
  - name: "angular.path"
    value: "angular-bootstrap"
  - name: "blazorwasm.path"
    value: "dotnet/src/BlazorWebAssemblyApp"
  - name: "dotnet.path"
    value: "dotnet"
  - name: "dotnet.integrationtestprojects"
    value: "test/*IntegrationTests/*.csproj"
  # specific variables
  - name: "angular.cli.version"
    value: "16.2.0"
  - name: "angular.build.configuration"
    value: "production"
  - name: "dotnet.buildconfiguration"
    value: "Release"
  - name: "dotnet.sdk.version"
    value: "7.0.x"
  - name: "nodejs.version.spec"
    value: "18.x"

pool:
  vmImage: "ubuntu-latest"

steps:
  # Requirements
  - task: NodeTool@0
    displayName: "Install Node.js"
    inputs:
      versionSpec: $(nodejs.version.spec)
  - task: Npm@1
    displayName: "Install Angular CLI"
    inputs:
      command: "custom"
      customCommand: "install -g @angular/cli@$(angular.cli.version)"
  - task: UseDotNet@2
    displayName: "Use .NET Core SDK"
    inputs:
      packageType: "sdk"
      version: $(dotnet.sdk.version)
  # Automated testing libraries (.NET)
  - task: DotNetCoreCLI@2
    displayName: "Create integration test libraries"
    inputs:
      command: "publish"
      projects: "$(dotnet.path)/$(dotnet.integrationtestprojects)"
      arguments: "-c Debug -o $(Build.ArtifactStagingDirectory)/testlibraries"
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      COREHOST_TRACE: 0
  - task: CopyFiles@2
    displayName: "Copy scripts to testlibraries artifact folder"
    inputs:
      SourceFolder: "./scripts"
      Contents: "**"
      TargetFolder: "$(Build.ArtifactStagingDirectory)/testlibraries/scripts"
  # ASP.NET Core web application
  - task: DotNetCoreCLI@2
    displayName: "Create ASP.NET API artifacts"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "$(dotnet.path)/src/Api/Api.csproj"
      arguments: "-c $(dotnet.buildconfiguration) -o $(Build.ArtifactStagingDirectory)/aspnetapi"
      modifyOutputPath: false
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      COREHOST_TRACE: 0
  # Blazor WebAssembly application
  - task: Npm@1
    displayName: "Install NPM packages at $(blazorwasm.path)"
    inputs:
      command: "install"
      workingDir: $(blazorwasm.path)
  - task: Bash@3
    displayName: "Write firebase.configfile"
    inputs:
      targetType: "inline"
      script: |
        bash ./scripts/write_blazorconfig.sh $(blazorwasm.path)/wwwroot $(firebase.apikey) $(firebase.projectid) $(firebase.messagingsenderid) $(firebase.appid) $(firebase.measurementid) $(keeptrack.dotnetapi.url)
  - task: Npm@1
    displayName: "Run WebPack"
    inputs:
      command: "custom"
      customCommand: "run webpack:prod"
      workingDir: $(blazorwasm.path)
  - task: DotNetCoreCLI@2
    displayName: "Create Blazor WebAssembly application artifacts"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "$(blazorwasm.path)/BlazorWebAssemblyApp.csproj"
      arguments: "-c $(dotnet.buildconfiguration) -o $(Build.ArtifactStagingDirectory)/blazorwebassembly"
      modifyOutputPath: false
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      COREHOST_TRACE: 0
  # Angular web application
  - task: Npm@1
    displayName: "Install NPM packages at $(angular.path)"
    inputs:
      command: "install"
      workingDir: $(angular.path)
  - task: Bash@3
    displayName: "Write environment.prod.ts file"
    inputs:
      targetType: "inline"
      script: |
        bash ./scripts/write_angularconfig.sh $(angular.path)/src/environments/environment.prod.ts $(firebase.apikey) $(firebase.projectid) $(firebase.messagingsenderid) $(firebase.appid) $(firebase.measurementid) $(keeptrack.dotnetapi.url)
  - task: CmdLine@2
    displayName: "Create Angular application artifacts"
    inputs:
      script: |
        ng build --configuration="$(angular.build.configuration)" --output-path="$(Build.ArtifactStagingDirectory)/angularbootstrap"
      workingDirectory: $(angular.path)
  # Save artifacts
  - task: PublishBuildArtifacts@1
    displayName: "Save artifacts"
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: "drop"
      publishLocation: "Container"
