# Azure pipeline definition for the packaging of the solution (continuous delivery)
# See: https://aka.ms/yaml

trigger:
  batch: false
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md

pr: none

variables:
  # library variable groups
  - group: "devproapp-prod"
  # application path
  - name: "angular.path"
    value: "angular-bootstrap"
  - name: "blazorwasm.path"
    value: "dotnet/src/BlazorWebAssemblyApp"
  - name: "dotnet.path"
    value: "dotnet"
  # specific variables
  - name: "angular.cli.version"
    value: "11.2.1"
  - name: "angular.build.configuration"
    value: "production"
  - name: "dotnet.buildconfiguration"
    value: "Release"
  - name: "dotnet.sdk.version"
    value: "5.0.200"
  - name: "nodejs.version.spec"
    value: "12.x"

pool:
  vmImage: "ubuntu-latest"

steps:
  - task: NodeTool@0
    displayName: "Install Node.js"
    inputs:
      versionSpec: $(nodejs.version.spec)
  - task: Npm@1
    displayName: "Install Angular CLI"
    inputs:
      command: "custom"
      customCommand: "install -g @angular/cli@$(angular.cli.version)"
  - task: UseDotNet@2
    displayName: "Use .NET Core SDK"
    inputs:
      packageType: "sdk"
      version: $(dotnet.sdk.version)
  # ASP.NET Core web application
  - task: DotNetCoreCLI@2
    displayName: "Publish ASP.NET API"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "$(dotnet.path)/src/Api/Api.csproj"
      arguments: "-c $(dotnet.buildconfiguration) -o $(Build.ArtifactStagingDirectory)/aspnetapi"
      modifyOutputPath: false
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      COREHOST_TRACE: 0
  # Blazor WebAssembly application
  - task: Npm@1
    displayName: "Install NPM packages at $(blazorwasm.path)"
    inputs:
      command: "install"
      workingDir: $(blazorwasm.path)
  - task: Bash@3
    displayName: "Write firebase.configfile"
    inputs:
      targetType: "inline"
      script: |
        rm -rf $(blazorwasm.path)/wwwroot/appsettings.json
        cat > $(blazorwasm.path)/wwwroot/appsettings.json <<EOL
        {
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft": "Warning",
              "Microsoft.Hosting.Lifetime": "Information"
            }
          },
          "Keeptrack": {
            "Api": {
              "Url": "$(keeptrack.dotnetapi.url)"
            }
          }
        }
        EOL
        cat > $(blazorwasm.path)/wwwroot/js/src/firebase.config.js <<EOL
        export var firebaseConfig = {
          apiKey: '$(firebase.apikey)',
          authDomain: '$(firebase.projectid).firebaseapp.com',
          databaseURL: 'https://$(firebase.projectid).firebaseio.com',
          projectId: '$(firebase.projectid)',
          storageBucket: '$(firebase.projectid).appspot.com',
          messagingSenderId: '$(firebase.messagingsenderid)',
          appId: '$(firebase.appid)',
          measurementId: '$(firebase.measurementid)'
        };
        EOL
  - task: Npm@1
    displayName: "Run WebPack"
    inputs:
      command: "custom"
      customCommand: "run webpack:prod"
      workingDir: $(blazorwasm.path)
  - task: DotNetCoreCLI@2
    displayName: "Publish Blazor WebAssembly application"
    inputs:
      command: "publish"
      publishWebProjects: false
      projects: "$(blazorwasm.path)/BlazorWebAssemblyApp.csproj"
      arguments: "-c $(dotnet.buildconfiguration) -o $(Build.ArtifactStagingDirectory)/blazorwebassembly"
      modifyOutputPath: false
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      COREHOST_TRACE: 0
  # Angular web application
  - task: Npm@1
    displayName: "Install NPM packages at $(angular.path)"
    inputs:
      command: "install"
      workingDir: $(angular.path)
  - task: Bash@3
    displayName: "Write environment.prod.ts file"
    inputs:
      targetType: "inline"
      script: |
        cat > $(angular.path)/src/environments/environment.prod.ts <<EOL
        export const environment = {
          production: true,
          keepTrackApiUrl: '$(keeptrack.dotnetapi.url)',
          firebase: {
            apiKey: '$(firebase.apikey)',
            authDomain: '$(firebase.projectid).firebaseapp.com',
            databaseURL: 'https://$(firebase.projectid).firebaseio.com',
            projectId: '$(firebase.projectid)',
            storageBucket: '$(firebase.projectid).appspot.com',
            messagingSenderId: '$(firebase.messagingsenderid)',
            appId: '$(firebase.appid)',
            measurementId: '$(firebase.measurementid)'
          }
        };
        EOL
  - task: CmdLine@2
    displayName: "Build Angular application"
    inputs:
      script: |
        ng build --configuration="$(angular.build.configuration)" --outputPath="$(Build.ArtifactStagingDirectory)/angularbootstrap"
      workingDirectory: $(angular.path)
  - task: PublishBuildArtifacts@1
    displayName: "Save artifacts"
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: "drop"
      publishLocation: "Container"
