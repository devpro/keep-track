# Azure pipeline definition for the nightly pipeline used to do non-regression on the different environments

trigger: none

pr: none

schedules:
- cron: "0 0 * * *"
  displayName: 'Daily midnight build'
  branches:
    include:
    - master
  always: true

variables:
# library variable groups
- group: 'build-tools'
- group: 'keeptrack-prod'
# common task variables
- name: 'BuildConfiguration'
  value: 'Debug'
- name: 'IntegrationTestProjects'
  value: 'test/*IntegrationTests/*.csproj'
# specific variables
- name: 'dotnet.path'
  value: 'dotnet'

stages:
# Production testing
- stage: 'production_testing'
  displayName: 'Production testing'
  dependsOn: [] # no dependencie with another stage
  condition: ne(variables['RunProductionTesting'], false)
  jobs:
  - job: 'windows_integrationtests'
    displayName: 'Windows CI'
    pool:
      # code coverage generation only works on Windows for the moment
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: $(dotnet.sdk.version.lts)
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET packages'
      inputs:
        command: 'restore'
        projects: '$(dotnet.path)/$(IntegrationTestProjects)'
        feedsToUse: 'select'
        noCache: $(dotnet.cache.disable)
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET solution'
      inputs:
        command: 'build'
        projects: '$(dotnet.path)/$(IntegrationTestProjects)'
        arguments: '-c $(BuildConfiguration) --no-restore'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
    - task: DotNetCoreCLI@2
      displayName: 'Run .NET test projects'
      inputs:
        command: 'test'
        projects: '$(dotnet.path)/$(IntegrationTestProjects)'
        arguments: '--configuration $(BuildConfiguration) --no-restore --no-restore --filter "Environment=Production" --collect "Code coverage"'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
        COREHOST_TRACE: 0
        AllowedOrigins__0: http://localhost:4200
        Authentication__JtBearer__TokenValidation__Issuer: $(authentication.jwtbearer.tokenvalidation.issuer)
        Authentication__JwtBearer__Authority: $(authentication.jwtbearer.authority)
        Authentication__JwtBearer__TokenValidation__Audience: $(authentication.jwtbearer.tokenvalidation.audience)
        Firebase__Application__Key: $(firebase.applicationkey)
        Firebase__Username: $(firebase.authentication.username)
        Firebase__Password: $(firebase.authentication.password)
    - task: VSTest@2
      displayName: 'Run .NET integration tests'
      inputs:
        testAssemblyVer2: |
          **\*IntegrationTests.dll
          !**\obj\**
        searchFolder: '$(System.DefaultWorkingDirectory)/_keeptrack-ci/testlibraries'
        testFiltercriteria: 'Environment=Production'
        runSettingsFile: '$(System.DefaultWorkingDirectory)/production.runsettings'
      env:
        AllowedOrigins__0: http://localhost:4200
        Authentication__JtBearer__TokenValidation__Issuer: $(authentication.jwtbearer.tokenvalidation.issuer)
        Authentication__JwtBearer__Authority: $(authentication.jwtbearer.authority)
        Authentication__JwtBearer__TokenValidation__Audience: $(authentication.jwtbearer.tokenvalidation.audience)
        Firebase__Application__Key: $(firebase.applicationkey)
        Firebase__Username: $(firebase.authentication.username)
        Firebase__Password: $(firebase.authentication.password)
    - task: CopyFiles@2
      displayName: 'Copy screenshots'
      condition: failed()
      inputs:
        Contents: '**/screenshot*.png'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        flattenFolders: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'
      condition: failed()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
