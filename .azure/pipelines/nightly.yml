# Azure pipeline definition for the nightly pipeline used to do non-regression on the different environments

trigger: none

pr: none

schedules:
  - cron: "0 0 * * *"
    displayName: "Daily midnight build"
    branches:
      include:
        - master
    always: true

variables:
  # library variable groups
  - group: "build-tools"
  # common task variables
  - name: "BuildConfiguration"
    value: "Debug"
  - name: "IntegrationTestProjects"
    value: "test/*IntegrationTests/*.csproj"
  # specific variables
  - name: "dotnet.path"
    value: "dotnet"

stages:
  # Production testing
  - stage: "production_testing"
    displayName: "Production testing"
    dependsOn: [] # no dependencie with another stage
    variables:
      - group: "devproapp-prod"
    condition: ne(variables['RunProductionTesting'], false)
    jobs:
      - job: "windows_integrationtests"
        displayName: "Integration tests on Windows"
        pool:
          # code coverage generation only works on Windows for the moment
          vmImage: "windows-latest"
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET Core SDK"
            inputs:
              packageType: "sdk"
              version: $(dotnet.sdk.version.lts)
          - task: DotNetCoreCLI@2
            displayName: "Restore .NET packages"
            inputs:
              command: "restore"
              projects: "$(dotnet.path)/$(IntegrationTestProjects)"
              feedsToUse: "select"
              noCache: $(dotnet.cache.disable)
            env:
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              COREHOST_TRACE: 0
          - task: DotNetCoreCLI@2
            displayName: "Build .NET solution"
            inputs:
              command: "build"
              projects: "$(dotnet.path)/$(IntegrationTestProjects)"
              arguments: "-c $(BuildConfiguration) --no-restore"
            env:
              DOTNET_CLI_TELEMETRY_OPTOUT: 1
              DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
              COREHOST_TRACE: 0
          - bash: |
              ./scripts/write_testrunsettings.sh $(environment.pascalname).runsettings $(keeptrack.jwtbearer.tokenvalidation.issuer) $(keeptrack.jwtbearer.authority) $(keeptrack.jwtbearer.tokenvalidation.audience) $(firebase.apikey) $(firebase.testing.user0.username) $(firebase.testing.user0.password) $(keeptrack.dotnetapi.url)
            workingDirectory: "$(System.DefaultWorkingDirectory)"
            displayName: "Write runsettings file"
          - task: VSTest@2
            displayName: "Run .NET integration tests"
            inputs:
              testAssemblyVer2: |
                **\*Api.IntegrationTests.dll
                !**\*TestAdapter.dll
                !**\obj\**
                !**\bin\**\ref\**
              searchFolder: "$(dotnet.path)"
              testFiltercriteria: "Environment=Production"
              runSettingsFile: "$(System.DefaultWorkingDirectory)/$(environment.pascalname).runsettings"
          - task: CopyFiles@2
            displayName: "Copy screenshots"
            condition: failed()
            inputs:
              Contents: "**/screenshot*.png"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/$(environment.pascalname)"
              flattenFolders: true
          - task: PublishBuildArtifacts@1
            displayName: "Publish artifacts"
            condition: failed()
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(environment.pascalname)"
              ArtifactName: "drop"
              publishLocation: "Container"
